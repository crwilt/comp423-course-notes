{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Charles' Course Notes","text":"<p>This is my home page. I will use it to organize and share my course notes.</p>"},{"location":"tutorials/go-setup/","title":"Setting up a dev container for Go","text":"<ul> <li>Primary author: Charles Wilt (https://github.com/crwilt)</li> <li>Reviewer: James McNell (https://github.com/jamesbmc1)</li> </ul>"},{"location":"tutorials/go-setup/#prerequisites","title":"Prerequisites","text":""},{"location":"tutorials/go-setup/#before-we-dive-in-make-sure-you-have","title":"Before we dive in, make sure you have:","text":"<ol> <li>Git installed: Install Git if you don\u2019t already have it.</li> <li>Visual Studio Code (VS Code): Download and install it from here.</li> <li>Docker installed: Required to run the dev container. Get Docker here.</li> <li>Command-line basics: Your COMP211 command-line knowledge will serve you well here. If in doubt, review the Learn a CLI text!</li> </ol>"},{"location":"tutorials/go-setup/#step-1-create-a-local-directory-and-initialize-git","title":"Step 1. Create a Local Directory and Initialize Git","text":"<p>(A) Open your terminal or command prompt.</p> <p>(B) Create a new directory for your project. (Note: Of course, if you'd like to organize this tutorial somewhere else on your machine, go ahead and change into that parent directory first. By default this will be in your user's home directory.):</p> <pre><code>mkdir directory-for-go\ncd directory-for-go\n</code></pre> <p>(C) Initialize a new Git repository:</p> <pre><code>git init\n</code></pre>"},{"location":"tutorials/go-setup/#step-2-add-development-container-configuration","title":"Step 2. Add Development Container Configuration","text":"<ol> <li>In VS Code, open <code>directory-for-go</code>. You can do this via: File &gt; Open Folder.</li> <li>Download the Dev Containers extension for VS Code.</li> <li>Create a .devcontainer directory in the root of your project with the following file inside of this \"hidden\" configuration directory:<code>.devcontainer/devcontainer.json</code></li> </ol> <p>Paste the following into <code>.devcontainer/devcontainer.json</code>: <pre><code>{\n  \"name\": \"Go-time\",\n  \"image\": \"mcr.microsoft.com/vscode/devcontainers/go:latest\",\n  \"customizations\": {\n    \"vscode\": {\n      \"settings\": {},\n      \"extensions\": [\"golang.go\"]\n    }\n}}\n</code></pre> Reopen the project in the container by pressing <code>Ctrl+Shift+P</code> (or <code>Cmd+Shift+P</code> on Mac), typing \"Dev Containers: Reopen in Container,\" and selecting the option. This may take a few minutes while the image is downloaded and the requirements are installed.</p> <p>The <code>devcontainer.json</code> file defines the configuration for your development environment. Here, we're specifying the following:</p> <ul> <li>name: A descriptive name for your dev container.</li> <li>image: The Docker image to use, in this case, the latest version of a Go environment. Microsoft maintains a collection of base images for many programming language environments, but you can also create your own!</li> <li>customizations: Adds useful configurations to VS Code, like installing the Go extension. When you search for VSCode extensions on the marketplace, you will find the string identifier of each extension in its sidebar. Adding extensions here ensures other developers on your project have them installed in their dev containers automatically.</li> </ul>"},{"location":"tutorials/go-setup/#step-3-using-your-container","title":"Step 3: Using Your Container","text":"<p>Once your dev container setup completes, close the current terminal tab (trash can), open a new terminal pane within VSCode, and try running <code>go version</code> to see your dev container is running a recent version of Go without much effort! (go1.23.4 as of writing this)</p> <p>Next run <code>go mod init hello-world</code> in order to create a mod file that tracks dependencies</p> <p>Next make a file in the root directory called <code>main.go</code>. This will contain the code for your Hello, World! program. Once created paste the code below into it: <pre><code>package main\n\nimport \"fmt\"\n\nfunc main() {\n    fmt.Println(\"Hello, World!\")\n}\n</code></pre> In order to actually run your program put <code>go run main.go</code> in the terminal. You should see the output of your Hello, World! program. </p> <p>An alternative way to run your program is by entering  <code>bash go build -o hello-world main.go ./hello-world</code></p> <p>Distinction</p> <p>Although both <code>go build</code> and <code>go run</code> both output <code>Hello, World!</code> They do very different things. <code>go build</code> creates an executable file with your go code, and needs <code>./hello world</code> to run it. <code>go run</code> compiles and runs the program in one step.</p>"},{"location":"tutorials/go-setup/#many-of-these-instructions-were-pulled-and-adjusted-from-this","title":"Many of these instructions were pulled and adjusted from this:","text":"<ul> <li>Title: Starting a Static Website Project with MkDocs</li> <li>Author: Kris Jordan </li> <li>Availability: https://comp423-25s.github.io/resources/MkDocs/tutorial/</li> </ul>"}]}